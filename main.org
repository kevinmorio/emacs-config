* Kevin's Emacs Config

#+begin_src emacs-lisp

;;; init.el --- Emacs configuration
;;
;; Copyright (C) 2020 Kevin Morio
;; Licensed under MIT
;;
;; Author: Kevin Morio <kevin@morio.me>
;;
;; This file is NOT part of GNU Emacs.
;;
;; TODO
;; - Revise folder paths
;; - Don't save undo history and other temporary files in $XDG_CONFIG_HOME but in $xDG_CONFIG_DATA_HOME
;; - Add global shortcuts for org-agenda
;; - Efficient method for flyspell
;; - Remove org-roam-link highlight
;; - Adopt org-capture templates for new apporach



;;;
;;; Variable declarations
;;;

;; (defconst km-paths '(:recentf ,(expand-file-name "recentf" user-emacs-directory)
;; 			      :backup ,(expand-file-name "backup" user-emacs-directory)
;; 			      :autosave ,(expand-file-name "auto-save" user-emacs-directory)
;; 			      :undo ,(expand-file-name "undo/" user-emacs-directory)))

(defconst km-save-file-path (expand-file-name "recentf" user-emacs-directory))
(defconst km-backup-path (expand-file-name "backup" user-emacs-directory))
(defconst km-auto-save-path (expand-file-name "auto-save" user-emacs-directory))
(defconst km-undo-path (expand-file-name "undo/" user-emacs-directory))

;; (defconst km-bibliography-path "~/Nextcloud/Literature/Bibliography")
(defconst km-bibliography-files (directory-files "~/Nextcloud/Literature/Bibliography" t "\\.bib"))
(defconst km-library-path "~/Nextcloud/Literature")
(defconst km-note-path "~/Nextcloud/Notes/Literature")
(defconst km-journal-path "~/Nextcloud/Journal")
(defconst km-knowledge-path "~/Nextcloud/Knowledge")

;; Create directories if they do not exist.
(unless (file-exists-p km-save-file-path)
  (make-directory km-save-file-path))

(unless (file-exists-p km-backup-path)
  (make-directory km-backup-path))

(unless (file-exists-p km-auto-save-path)
  (make-directory km-auto-save-path))

(unless (file-exists-p km-undo-path)
  (make-directory km-undo-path))


(defconst km-texbin-path "/Library/TeX/texbin")

(when (file-exists-p km-texbin-path)
  (add-to-list 'exec-path km-texbin-path)
  (setenv "PATH" (concat km-texbin-path ":" (getenv "PATH"))))

(defconst km-local-bin-path "/usr/local/bin")

(when (file-exists-p km-local-bin-path)
  (add-to-list 'exec-path km-local-bin-path)
  (setenv "PATH" (concat km-local-bin-path ":" (getenv "PATH"))))

(setenv "DICPATH" (concat (getenv "HOME") "/Library/Spelling"))

;; Set language such that flyspell uses the correct dictionary.
(setenv "LANG" "en_US.UTF-8")



;; ;;;
;; ;;; Packages
;; ;;;
;; 
;; ;; Allow multiple Emacs versions to share the same repositories
;; ;; using a build directory based on the current Emacs version.
;; (setq straight-build-dir (concat "build/" emacs-version))
;; 
;; ;; Setup straight.el
;; (defvar bootstrap-version)
;; (let ((bootstrap-file
;;        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
;;       (bootstrap-version 5))
;;   (unless (file-exists-p bootstrap-file)
;;     (with-current-buffer
;;         (url-retrieve-synchronously
;;          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
;;          'silent 'inhibit-cookies)
;;       (goto-char (point-max))
;;       (eval-print-last-sexp)))
;;   (load bootstrap-file nil 'nomessage))
;; 
;; ;; Install use-package and required packages using straight
;; (straight-use-package 'use-package)
;; (straight-use-package 'diminish)
;; (straight-use-package 'bind-key)
;; 
;; ;; Use straight.el by default for use-package
;; (setq straight-use-package-by-default t)



;;;
;;; Builtin packages
;;;

;; Highlight matching pairs
(use-package paren
  :config
  (show-paren-mode t))

;; Highlight current line
(use-package hl-line
  ;; :custom-face
  ;; (hl-line ((t (:background "#454545"))))
  :config
  (global-hl-line-mode t))

;; (use-package ido
;;   :config
;;   (setq ido-enable-flex-matching t)
;;   (setq ido-everywhere t)
;;   (ido-mode t))

(use-package display-line-numbers
  ;; :custom-face
  ;; (line-number-current-line ((t (:inherit line-number
  ;; 					  :background "#454545"
  ;; 					  :foreground "systemYellowColor"
  ;; 					  :weight bold))))
  :config
  (setq-default display-line-numbers-width 3)
  :hook
  (prog-mode . display-line-numbers-mode))

(use-package recentf
  :config
  (setq recentf-save-file (expand-file-name "recentf" km-save-file-path)
	recentf-max-saved-items nil
	recentf-max-menu-items 15)
  (recentf-mode))



;;;
;;; Essential packages
;;;

(use-package evil
  :config
  (evil-mode t))

(use-package which-key
  :config
  (which-key-mode t))

(use-package magit)

(use-package company
  :config
  (setq company-idle-delay 0.25)
  (setq company-minimum-prefix-length 2)
  (global-company-mode))

(use-package ivy
  :diminish
  ;;  :bind (("C-c C-r" . ivy-resume))
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "(%d/%d): ")
  :config
  (ivy-mode))

(use-package counsel
  :after ivy
  :config
  (counsel-mode))

(use-package swiper
  :after ivy
  :bind (("C-s" . swiper))
  :config
  (setq swiper-stay-on-quit t))

;; Simple but effective sorting and filtering for Emacs.
(use-package prescient
  :config
  (prescient-persist-mode))

(use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode))

(use-package company-prescient
  :config
  (company-prescient-mode))



;;;
;;; General settings
;;;

;; Disable blinking cursor
(blink-cursor-mode nil)

;; Smooth scrolling such that redisplay will never recenter point.
(setq scroll-conservatively 101)

;; Use y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; (load-theme 'wombat)

;; Set default font
(set-face-attribute 'default nil
		    :family "PragmataPro Mono Liga"
		    :height 155
		    :weight 'normal
       		    :width 'normal)

;; Increase the line spacing for increased readability
(setq-default line-spacing 0.3)

(setq-default fill-column 80)

;; Enable emoji, and stop the UI from freezing when trying to display them.
(when (fboundp 'set-fontset-font)
  (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))

;; Enable ligatures on macOS port
(when (fboundp 'mac-auto-operator-composition-mode)
  ;; Remove '*' from composed characters to avoid issues with Org's indent mode.
  (custom-set-variables
   '(mac-auto-operator-composition-characters "!\"#$%&'()+,-./:;<=>?@[\\]^_`{|}~"))
  (mac-auto-operator-composition-mode t))


(add-to-list 'load-path "~/.config/emacs/lisp")
					; (require 'pragmatapro-lig)
					; (pragmatapro-lig-mode t)

;; Disable bell sound
(setq ring-bell-function 'ignore)

;; Disable menubar, toolbar, and scrollbar
(if (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

(when (window-system)
  (set-frame-width (selected-frame) 120)
  (set-frame-height (selected-frame) 60)
  (set-frame-position (selected-frame) 50 30))


;; Changes made in the configuration UI are stored in a different file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(when (file-exists-p custom-file)
  (load custom-file))

;; To avoid cluttering each directory with backuo and auto-save files
;; store them in a central plasce while only keeping the most recent copies
;; and automatically deleting excessing backups.
(setq backup-directory-alist `(("." . ,km-backup-path))
      ;; Do not delink hardlinks
      backup-by-copying t    
      ;; Use version numbers as backups
      version-control t
      ;; Automatically delete excess backups
      delete-old-versions t
      ;; Keep 10 new versions
      kept-new-versions 10
      ;; Keep 5 old version
      kept-old-versions 5)

;; Set directory to store auto-saves.
;; (setq auto-save-file-name-transforms `((".*" ,km-auto-save-path t)))

;; Set directory to store undo history.
(setq undo-tree-auto-save-history t
      undo-tree-history-directory-alist `(("." . ,km-undo-path)))



;;;
;;; Visual enhancements
;;;

(use-package beacon
  :config
  (beacon-mode t))

(use-package doom-themes
  :config
  (load-theme 'doom-dark+ t)

  ;; Enable flashing mode-line on errors
  ;; (doom-themes-visual-bell-config)

  ;; TODO: This sets some undisired properties like hiding leading stars
  ;; Corrects (and improve) org-mode's native fontification
  ;; (doom-themes-org-config)
  :custom
  (doom-dark+-blue-modeline t)
  ;; (doom-one-light-padded-modeline t)
  (doom-one-light-brighter-modeline t)
  (doom-one-light-brighter-comments t))

(use-package doom-modeline
  :init
  (doom-modeline-mode t))

;;;
;;; Project management
;;;

(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode t))

(use-package counsel-projectile
  :config
  (counsel-projectile-mode t))



;;;
;;; Indentation
;;;

(use-package aggressive-indent
  :hook
  (emacs-lisp-mode . aggressive-indent-mode))



;;;
;;; Note taking and knowledge aggregation
;;;

;; Spell checking
(use-package flyspell
  :straight nil
  :config
  (setq ispell-dictionary "en_US")
  :hook
  (text-mode . flyspell-mode))

(use-package flyspell-correct-ivy
  :bind
  (:map flyspell-mode-map
	(("C-;" . flyspell-correct-wrapper)))
	:custom
	(flyspell-correct-interface #'flyspell-correct-ivy))


;; (use-package visual-fill-column)

(setq reftex-default-bibliography km-bibliography-files)

(setq org-ref-default-bibliography km-bibliography-files
      org-ref-bibliography-notes km-note-path
      org-ref-pdf-directory km-library-path)

(setq bibtex-completion-bibliography km-bibliography-files
      bibtex-completion-notes-path km-note-path
      bibtex-completion-library-path km-library-path
      bibtex-completion-pdf-field "file")

(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
	 (pdf-file (car (bibtex-completion-find-pdf key))))
    (message "my/org-ref-open-pdf-at-point %s" key)
    (if (file-exists-p pdf-file)
	(org-open-file pdf-file)
      (message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)

(setq org-ref-completion-library 'org-ref-ivy-cite)

(use-package org
  :mode
  ("\\.org\\'" . org-mode)
  :custom
  (org-return-follow-link t)
  (org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))
  (org-confirm-babel-evaluate nil)
  (org-start-indented t)
  (org-preview-latex-image-directory (expand-file-name "ltximg" (temporary-file-directory)))
  (org-preview-latex-default-process 'dvisvgm)
  :bind (("C-c t" . counsel-org-tags)
	 ("C-c h" . org-metaleft)
	 ("C-c j" . org-metadown)
	 ("C-c k" . org-metaup)
	 ("C-c l" . org-metaright))
  :custom-face 
  (variable-pitch ((t (:family "PragmataPro Liga"))))
  (fixed-pitch ((t (:family "PragmataPro Mono Liga"))))
  :config
  (add-to-list 'org-structure-template-alist '("t" . "theorem"))
  (add-to-list 'org-structure-template-alist '("d" . "definition"))
  (add-to-list 'org-structure-template-alist '("co" . "corollary"))
  (add-to-list 'org-structure-template-alist '("lm" . "lemma"))
  (setq org-agenda-custom-commands
	'(("c" tags "+context"
	   ((org-agenda-prefix-format "")))))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.25))
  (require 'org-tempo)
  (defun km/style-org ()
    (variable-pitch-mode t)
    ;; (visual-line-mode)
    ;; (visual-fill-column-mode)
    (mapc
     (lambda (face)
       (set-face-attribute face nil :family "PragmataPro Mono Liga"))
     (list 'org-code
	   'org-block
	   'org-table
	   'org-verbatim
	   'org-block-begin-line
	   'org-block-end-line
	   'org-meta-line
	   'org-document-info-keyword))
    (set-face-attribute 'org-document-title nil :weight 'bold :height 240)
    (set-face-attribute 'org-document-info-keyword nil)
    ;; (set-face-attribute 'org-done nil :strike-through t :weight 'bold)
    ;; (set-face-attribute 'org-headline-done nil :strike-through t)
    (set-face-attribute 'org-level-1 nil :weight 'bold)
    (set-face-attribute 'org-level-2 nil :weight 'bold)
    (set-face-attribute 'org-level-3 nil :weight 'bold))
  
  (add-hook 'org-mode-hook #'km/style-org)
  (add-hook 'org-capture-mode-hook #'evil-insert-state)
  (add-hook 'org-agenda-mode-hook #'hack-dir-local-variables-non-file-buffer))

;;; Auto update 'LAST_MODIFIED' property in org files if it is present in the first 8 lines.
(require 'time-stamp)
(setq time-stamp-pattern (format "#\\+LAST_MODIFIED: %s$" (cdr org-time-stamp-formats)))
(add-hook 'write-file-functions 'time-stamp)


(use-package org-ref
  :config
  (setq org-ref-notes-function 'org-ref-notes-function-many-files)
  :after counsel)

(defun my/org-ref-ivy-open-note (&optional arg)
  "ivy function for opening a note"
  (interactive "P")
  (setq org-ref-bitex-files (org-ref-find-bibliography))
  (setq org-ref-ivy-cite-marked-candidates '())

  (ivy-read "Open: " (orhc-bibtex-candidates)
	    :require-match t
	    :keymap org-ref-ivy-cite-keymap
	    :re-builder org-ref-ivy-cite-re-builder
	    :action 'or-ivy-bibtex-open-notes
	    :caller 'my/org-ref-ivy-open-note))

;; Template used to create a new note.
;; TODO: Add #+roam_key to support citation backlinks
(setq bibtex-completion-notes-template-multiple-files
      "#+TITLE: (${year}) ${title} [${author-or-editor}]

,* (${year}) ${title} [${author-or-editor}]
  :PROPERTIES:
  :Custom_ID: ${=key=}
  :Author:    ${author-or-editor}
  :Year:      ${year}
  :Doi:       ${doi}
  :Url:       ${url}
  :END:

- cite:${=key=}

")



;;; Org Journal

(use-package org-journal
  :custom
  (org-journal-dir km-journal-path)
  (org-journal-date-format "%d.%m %A")
  (org-journal-file-type 'monthly)
  (org-journal-file-format "%Y%m.org"))

(defun org-journal-file-header-func (time)
  "Custom function to create journal header."
  (concat
   (pcase org-journal-file-type
     (`daily   (format-time-string "#+TITLE: %A %d.%m.%Y --- Daily Journal\n#+STARTUP: showeall indent\n\n" time))
     (`weekly  (format-time-string "#+TITLE: W%W %Y --- Weekly Journal\n#+STARTUP: fold indent\n\n" time))
     (`monthly (format-time-string "#+TITLE: %B %Y --- Monthly Journal\n#+STARTUP: fold indent\n\n" time))
     (`yearly  (format-time-string "#+TITLE: %Y --- Yearly Journal\n#+STARTUP: fold indent\n\n" time)))))

(setq org-journal-file-header 'org-journal-file-header-func)


;;; Org web tools

(use-package org-web-tools)


;;; Org Roam

(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory km-knowledge-path)
  :custom-face
  (org-roam-link ((t (:inherit org-link
			       :foreground "SpringGreen1"
			       :weight bold))))
  :bind  (:map org-roam-mode-map
	       (("C-c n l" . org-roam)
    		("C-c n f" . org-roam-find-file)
		("C-c n b" . org-roam-switch-to-buffer)
		("C-c n g" . org-roam-graph-show)
		("C-c n b" . org-roam-buffer-toggle-display)
		)
	       :map org-mode-map
	       (("C-c n i" . org-roam-insert))))


(setq org-roam-capture-templates
      '(("d" "default" plain #'org-roam-capture--get-point
	 ""
	 :file-name "%<%Y%m%d-%H%M%S>-${slug}"
	 :head "#+TITLE: ${title}

- Contexts :: %?

,* ${title}
  :PROPERTIES:
  :Created: %<%Y%m%d%H%M%S>
  :END:"
	 :empty-lines-after 2
	 :unarrowed t)
	("c" "context" plain #'org-roam-capture--get-point
	 ""
	 :file-name "%<%Y%m%d-%H%M%S>-${slug}"
	 :head "#+TITLE: ${title}
	 
,* ${title} :context:
  :PROPERTIES:
  :Created: %<%Y%m%d%H%M%S>
  :END:"
	 :empty-lines-after 1
	 :immediate-finish t)))

;; (setq org-capture-templates
;;       '(("n" "Knowledge note" plain
;; 	 (file (lambda () (expand-file-name
;; 			   (format-time-string "%Y%m%d-%H%M%S.org" nil t)
;; 			   km-knowledge-files)))
;; 	 "#+TITLE: %?\n#+FILETAGS: ")
;; 	("d" "Daily note" entry
;; 	 (file "")
;; 	 ""
;; 	 :prepend t
;; 	 :jump-to-captured t
;; 	 :empty-lines-after 2)))

;; System specific configuration

;; macOS
;; Command: Super
;; Left option: Meta
;; Right option: Default (compose)
(cond ((eq system-type 'darwin)
       (setq mac-command-modifier 'super
	     mac-option-modifier 'meta
	     mac-right-option-modifier nil)))

(add-to-list `default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list `default-frame-alist '(ns-appearance . dark))

;; Hide buffer title and icon in titlebar
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)

;; Remove internal border (shows as gap between modeline and window border)
(set-frame-parameter nil 'internal-border-width 0)

;;; init.el ends here

#+end_src
